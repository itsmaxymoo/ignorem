import re
import ignorem

class GitIgnore:
	_HEADER_BEGIN = "# BEGIN ignorem auto-gen"
	_HEADER_END = "# END ignorem auto-gen"
	_HEADER_INSTALLED = "# ignorem installed gitignores: "

	def __init__(self, text = ""):
		self.__text = text
		self.__ignores = ""
		self.__loose_ignore = ""
		self.__installed = {}

		self.parse(text)


	def parse(self, text):
		# Get the list of ignorem installed gitignores
		installed = re.search(rf"(?<={GitIgnore._HEADER_INSTALLED})([A-Za-z0-1_ ,]+)", text)
		installed = installed.group(0) if installed else ""
		installed = re.split(r"[ ,]+", installed)
		for i in installed:
			self.__installed[i.lower()] = ""

		# Isolate loose ignores
		auto_gen_ignores = re.findall(rf"({GitIgnore._HEADER_BEGIN})((\s|\S)*)({GitIgnore._HEADER_END})", text)
		for i in auto_gen_ignores:
			text = text.replace(i, "")
		text = re.sub(r"(?<=(\r|\n){2})(\r|\n)", "", text)
		self.__loose_ignore = text


	def add(self, gitignore):
		if not gitignore in self.__installed:
			self.__installed[gitignore] = ""
			return True
		else:
			return False


	def remove(self, gitignore):
		if gitignore in self.__installed:
			del self.__installed[gitignore]
			return True
		else:
			return False
	

	def get_installed(self):
		return self.__installed.keys()


	def get_complete_gitignore(self, verbose = True):
		text = f"""{GitIgnore._HEADER_BEGIN}
# This gitingore was generated by {ignorem.PROGRAM_NAME} version {ignorem.PROGRAM_VERSION}
# {ignorem.PROGRAM_URL}
# DO NOT EDIT ANY TEXT INSIDE THE {ignorem.PROGRAM_NAME} auto-gen TAGS!
# Following this header are the loose ignores, or ignores added externally.
# After that, there are the ignores generated by {ignorem.PROGRAM_NAME}.
{GitIgnore._HEADER_END}

{self.__loose_ignore}

{GitIgnore._HEADER_BEGIN}
# Beginning of {ignorem.PROGRAM_NAME} generated ignores.
{GitIgnore._HEADER_INSTALLED + ", ".join(self.__installed)}
{GitIgnore._HEADER_END}
"""
		return text


	def __str__(self):
		return self.get_complete_gitignore(False)
